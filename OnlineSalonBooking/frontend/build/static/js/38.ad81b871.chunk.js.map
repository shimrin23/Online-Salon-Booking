{"version":3,"file":"static/js/38.ad81b871.chunk.js","mappings":"sIAEAA,EAAAA,EAAAA,SAAAA,QAAyBC,CAAAA,SAAAA,aAAAA,WAAAA,GAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,cAAAA,GAAYC,wBAErC,IAAMC,EAAS,yCAAG,WAAOC,GAAG,uGAEDJ,EAAAA,EAAAA,IAAUI,EAAK,CACpCC,QAAS,CACPC,cAAc,UAAD,OAAYC,aAAaC,QAAQ,aAE/C,KAAD,EAJU,OAIV,SAJMC,EAAI,EAAJA,KAAI,kBAKLA,GAAI,OAE8B,MAF9B,yBAEXC,QAAQC,MAAM,mBAAmB,EAAD,IAAS,8DAG5C,gBAZc,sCAcf,K,gMCPAX,EAAAA,EAAAA,SAAAA,QAAyBC,CAAAA,SAAAA,aAAAA,WAAAA,GAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,cAAAA,GAAYC,wBAkGrC,UAhGA,WACE,IAAMU,GAAWC,EAAAA,EAAAA,MACjB,GAAsCC,EAAAA,EAAAA,UAAS,CAC7CC,MAAO,GACPC,SAAU,KACV,eAHKC,EAAW,KAAEC,EAAc,KAI5BC,GAAWC,EAAAA,EAAAA,MAEXC,EAAc,SAACC,GACnB,MAAwBA,EAAEC,OAAlBC,EAAI,EAAJA,KAAMC,EAAK,EAALA,MACdP,GAAe,kBACVD,GAAW,cACbO,EAAOC,IAEZ,EAEMC,EAAU,yCAAG,WAAOJ,GAAC,wFAGA,GAFzBA,EAAEK,iBAAiB,SAETZ,EAAoBE,EAApBF,MAAOC,EAAaC,EAAbD,SAEVD,GAAUC,EAAQ,yCACdY,EAAAA,GAAAA,MAAY,oCAAkC,YAEnDZ,EAASa,OAAS,GAAC,yCACdD,EAAAA,GAAAA,MAAY,gDAA8C,uBAG5CA,EAAAA,GAAAA,QACrB5B,EAAAA,EAAAA,KAAW,cAAe,CAAEe,MAAAA,EAAOC,SAAAA,IACnC,CACEc,QAAS,gBACTC,QAAS,mBACTpB,MAAO,uBACPqB,QAAS,oBAEX,KAAD,EAQD,OARC,SAROvB,EAAI,EAAJA,KAURF,aAAa0B,QAAQ,QAASxB,EAAKyB,OAG7BC,GAAUC,EAAAA,EAAAA,GAAW3B,EAAKyB,OAC1BG,EAASF,EAAQE,OAEvB,WACuBlC,EAAAA,EAAAA,GAAU,iBAAD,OAAkBkC,IAAU,KAAD,GAArDC,EAAQ,OAGd1B,GAAS2B,EAAAA,EAAAA,IAAYD,IAGrBnB,EAAS,KAAK,kDAEdS,EAAAA,GAAAA,MAAY,gDACZlB,QAAQC,MAAM,EAAD,IAAQ,0DAExB,gBAxCe,sCA0ChB,OACE,oBAAS6B,UAAU,+BAA8B,UAC/C,iBAAKA,UAAU,iCAAgC,WAC7C,eAAIA,UAAU,eAAc,SAAC,aAC7B,kBAAMC,SAAUf,EAAYc,UAAU,gBAAe,WACnD,kBACEE,KAAK,QACLlB,KAAK,QACLgB,UAAU,aACVG,YAAY,mBACZlB,MAAOR,EAAYF,MACnB6B,SAAUvB,KAEZ,kBACEqB,KAAK,WACLlB,KAAK,WACLgB,UAAU,aACVG,YAAY,sBACZlB,MAAOR,EAAYD,SACnB4B,SAAUvB,KAEZ,mBAAQqB,KAAK,SAASF,UAAU,eAAc,SAAC,gBAIjD,yBAAG,cACW,KACZ,SAAC,KAAO,CAACA,UAAU,aAAaK,GAAI,YAAY,SAAC,iBAIpD,SAAC,KAAI,CAACA,GAAG,IAAIL,UAAU,eAAc,SAAC,4BAK7C,C","sources":["helper/apiCall.js","pages/Login.jsx"],"sourcesContent":["import axios from \"axios\";\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_SERVER_DOMAIN;\r\n\r\nconst fetchData = async (url) => {\r\n  try {\r\n    const { data } = await axios.get(url, {\r\n      headers: {\r\n        Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n      },\r\n    });\r\n    return data;\r\n  } catch (error) {\r\n    console.error(\"API fetch error:\", error);\r\n    throw error; // re-throw to handle later if needed\r\n  }\r\n};\r\n\r\nexport default fetchData;\r\n","import React, { useState } from \"react\";\r\nimport { NavLink, useNavigate } from \"react-router-dom\";\r\nimport \"../styles/register.css\";\r\nimport axios from \"axios\";\r\nimport toast from \"react-hot-toast\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setUserInfo } from \"../redux/reducers/rootSlice\";\r\nimport jwt_decode from \"jwt-decode\";\r\nimport fetchData from \"../helper/apiCall\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_SERVER_DOMAIN;\r\n\r\nfunction Login() {\r\n  const dispatch = useDispatch();\r\n  const [formDetails, setFormDetails] = useState({\r\n    email: \"\",\r\n    password: \"\",\r\n  });\r\n  const navigate = useNavigate();\r\n\r\n  const inputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormDetails({\r\n      ...formDetails,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  const formSubmit = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      const { email, password } = formDetails;\r\n\r\n      if (!email || !password) {\r\n        return toast.error(\"Input field should not be empty\");\r\n      }\r\n      if (password.length < 5) {\r\n        return toast.error(\"Password must be at least 5 characters long\");\r\n      }\r\n\r\n      const { data } = await toast.promise(\r\n        axios.post(\"/user/login\", { email, password }),\r\n        {\r\n          pending: \"Logging in...\",\r\n          success: \"Login successful\",\r\n          error: \"Unable to login user\",\r\n          loading: \"Logging user...\",\r\n        }\r\n      );\r\n\r\n      localStorage.setItem(\"token\", data.token);\r\n\r\n      // Decode token once\r\n      const decoded = jwt_decode(data.token);\r\n      const userId = decoded.userId;\r\n\r\n      // Fetch full user info\r\n      const userData = await fetchData(`/user/getuser/${userId}`);\r\n\r\n      // Dispatch full user info\r\n      dispatch(setUserInfo(userData));\r\n\r\n      // Navigate to home page\r\n      navigate(\"/\");\r\n    } catch (error) {\r\n      toast.error(\"Login failed. Please check your credentials.\");\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <section className=\"register-section flex-center\">\r\n      <div className=\"register-container flex-center\">\r\n        <h2 className=\"form-heading\">Sign In</h2>\r\n        <form onSubmit={formSubmit} className=\"register-form\">\r\n          <input\r\n            type=\"email\"\r\n            name=\"email\"\r\n            className=\"form-input\"\r\n            placeholder=\"Enter your email\"\r\n            value={formDetails.email}\r\n            onChange={inputChange}\r\n          />\r\n          <input\r\n            type=\"password\"\r\n            name=\"password\"\r\n            className=\"form-input\"\r\n            placeholder=\"Enter your password\"\r\n            value={formDetails.password}\r\n            onChange={inputChange}\r\n          />\r\n          <button type=\"submit\" className=\"btn form-btn\">\r\n            Sign In\r\n          </button>\r\n        </form>\r\n        <p>\r\n          Not a user?{\" \"}\r\n          <NavLink className=\"login-link\" to={\"/register\"}>\r\n            Register\r\n          </NavLink>\r\n        </p>\r\n       <Link to=\"/\" className=\"btn home-btn\">‚Üê Back to Home</Link>\r\n\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n"],"names":["axios","process","REACT_APP_SERVER_DOMAIN","fetchData","url","headers","Authorization","localStorage","getItem","data","console","error","dispatch","useDispatch","useState","email","password","formDetails","setFormDetails","navigate","useNavigate","inputChange","e","target","name","value","formSubmit","preventDefault","toast","length","pending","success","loading","setItem","token","decoded","jwt_decode","userId","userData","setUserInfo","className","onSubmit","type","placeholder","onChange","to"],"sourceRoot":""}